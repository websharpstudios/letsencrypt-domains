#!/bin/bash

# The hook script (indicated in the config.sh file or the --hook/-k command
# line argument) gets four arguments: an operation name (clean_challenge,
# deploy_challenge, or deploy_cert) and some operands for that. For
# deploy_challenge $2 is the domain name for which the certificate is required,
# $3 is a "challenge token" (which is not needed for dns-01), and $4 is a token
# which needs to be inserted in a TXT record for the domain.

set -e
set -u

umask 022

BASE="/srv/letsencrypt.debian.org/var/hook"
RES="/srv/letsencrypt.debian.org/var/result"
MASTER="denis.debian.org"
REBUILDZONES="sudo -u dnsadm -H /srv/dns.debian.org/bin/update --no-keys-update"
WAIT_TIMEOUT=600
NSSEARCHDIGOPT=""

[ -e /etc/dsa/le-hook.conf ] && . /etc/dsa/le-hook.conf

getzone() {
  name="$1"; shift

  # find zone cut
  while [ "$(dig -t SOA "$name" +noall +answer | awk '$4=="CNAME" {exit} $4=="SOA" {print}')" = "" ] && [ "$name" != "" ] ; do
    name=${name#*.}
  done
  echo "$name"
}

getserial() {
  name="$1"; shift
  if [ "$#" -gt 0 ]; then
    from="@$1"
  else
    from=""
  fi
  dig -t SOA "$name" $from +short | awk '{print $3}'
}

post() {
  local names
  local zones
  local preserials

  local name
  local zone
  local pre
  local i

  local count
  local stage
  local sleep_time
  local last_dig_output
  local serial

  names=("$@")
  for name in "${names[@]}"; do
    zone="$(getzone "$name")"
    pre="$(getserial "$zone" "$MASTER")"

    zones+=("$zone")
    preserials+=("$pre")
  done

  cat "$BASE/challenges/"* > "$BASE/snippet"
  (cd / && $REBUILDZONES)

  count=1
  sleep_time=1
  for i in "${!names[@]}"; do
    name="${names[$i]}"
    zone="${zones[$i]}"
    pre="${preserials[$i]}"

    if [ -z "$pre" ]; then
      echo "Unable to learn previous serial for $zone (for $name) from $MASTER.  (Maybe $MASTER is not authoritative for the zone.)"
      echo "We will sleep 5 seconds and just cross our fingers."
      sleep 5
      continue
    fi

    stage=1
    last_dig_output=0
    while : ; do
      case $stage in
        1) # wait for master to get a new serial
          serial="$(getserial "$zone" "$MASTER")"
          echo "Waiting for master to update $zone (for $name) from $pre.  Currently at $serial.."
          if [ "$serial" != "$pre" ]; then
            # We're assuming this new version includes our snippet.  There's a
            # bit of a race here if the zone updated for some other reason.
            stage=2
            continue
          fi
          ;;
        2) # wait for all secondaries to get a new serial
          echo "Waiting for secondaries to update to match master at $serial.."
          # we are evil and ignore serial wrapping
          if dig "$zone" +nssearch $NSSEARCHDIGOPT | awk -vs="$serial" '$4 < s {exit 1}'; then
            # all secondaries have at least $serial, stop waiting
            break
          elif [ $(( count - last_dig_output )) -ge 10 ]; then
            dig "$zone" +nssearch $NSSEARCHDIGOPT | sed -e 's/^/ /'
            last_dig_output="$count"
          fi
      esac
      if [ "$count" -gt "$WAIT_TIMEOUT" ]; then
        echo >&2 "Timing out in stage $stage"
        echo >&2 "Serial is $serial.  Servers are at:"
        dig "$zone" +nssearch $NSSEARCHDIGOPT >&2
        echo >&2 "Giving it a try anyway.  Maybe it will work.."
        break
      fi
      if   [ "$count" -gt 30 ] ; then sleep_time=5;
      elif [ "$count" -gt 15 ] ; then sleep_time=3;
      elif [ "$count" -gt  5 ] ; then sleep_time=2; fi
      count=$(( count + sleep_time ))
      sleep $sleep_time;
    done
  done
}
deploy_challenge() {
  local name
  local chtoken
  local token
  local str
  local labelnames

  mkdir -p "$BASE/challenges"

  labelnames=()

  while [ "$#" -gt 0 ]; do
    name="$1"; shift
    chtoken="$1"; shift
    token="$1"; shift

    str="_acme-challenge.$name. 60 IN TXT \"$token\""

    echo "Adding challenge '${str}' for $name."
    echo "${str}" >> "$BASE/challenges/$name"
    labelnames+=("_acme-challenge.$name")
  done
  post "${labelnames[@]}"
}
clean_challenge() {
  local name
  while [ "$#" -gt 0 ]; do
    name="$1"; shift
    rm -f "$BASE/challenges/$name"
  done
  : > "$BASE/snippet"
}
deploy_cert() {
  local name
  name="$1"; shift
  echo "Calling deploy for $name"
  deploy "$name"
}


op="$1"; shift

case "$op" in
  clean_challenge)
    clean_challenge "$@"
    ;;
  deploy_challenge)
    deploy_challenge "$@"
    ;;
  deploy_cert)
    deploy_cert "$@"
    ;;
  unchanged_cert|exit_hook|request_failure|invalid_challenge|startup_hook)
    ;;
  *)
    #echo >&2 "Warning: $0: Ignoring unknown hook op $op (this is not an error)"
    : silently ignore unknown hooks
    ;;
esac
